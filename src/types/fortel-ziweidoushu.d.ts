// declare module "fortel-ziweidoushu";

// declare class Cell {
//   #private;
//   constructor(sky: Sky, ground: Ground);
//   get sky(): Sky;
//   get ground(): Ground;
//   get temples(): Temple[];
//   get majorStars(): MajorStar[];
//   get minorStars(): MinorStar[];
//   get miniStars(): MiniStar[];
//   get allStars(): Star[];
//   get allMiniStars(): MiniStar[];
//   get borrowCells(): Readonly<BorrowCell>[];
//   get leaderStar(): MiniStar;
//   set leaderStar(leaderStar: MiniStar);
//   get yearGodStar(): MiniStar;
//   set yearGodStar(yearGodStar: MiniStar);
//   get scholarStar(): MiniStar;
//   set scholarStar(scholarStar: MiniStar);
//   get ageStart(): number;
//   set ageStart(ageStart: number);
//   get ageEnd(): number;
//   get lifeStage(): LifeStage;
//   set lifeStage(lifeStage: LifeStage);
//   get cellIndex(): number;
//   set cellIndex(cellIndex: number);
//   get prevCell(): Cell;
//   set prevCell(cell: Cell);
//   get nextCell(): Cell;
//   set nextCell(cell: Cell);
//   get self(): Cell;
//   getPrevICell(i: number): Cell;
//   getNextICell(i: number): Cell;
//   getCellNextDist(cell: Cell): number;
//   getCellPrevDist(cell: Cell): number;
//   getCellDist(cell: Cell): number;
//   [util.inspect.custom](depth: number, opts: any): string;
//   toJSON(): {
//     sky: Sky;
//     ground: Ground;
//     temples: Temple[];
//     majorStars: MajorStar[];
//     minorStars: MinorStar[];
//     miniStars: MiniStar[];
//     miscStars: MiniStar[];
//     ageStart: number | undefined;
//     ageEnd: number | undefined;
//     lifeStage: LifeStage | undefined;
//   };
//   toString(): string;
//   equals(cell: Cell): boolean;
//   get selfWithBorrow(): Cell[];
//   get oppositeCell(): Cell;
//   get oppositeCellWithBorrow(): Cell[];
//   get selfOppositeCells(): [Cell, Cell];
//   get selfOppositeCellsWithBorrow(): Cell[];
//   get supportCells(): [Cell, Cell];
//   get supportCellsWithBorrow(): Cell[];
//   get triangleCells(): [Cell, Cell, Cell];
//   get triangleCellsWithBorrow(): Cell[];
//   get fourCells(): [Cell, Cell, Cell, Cell];
//   get fourCellsWithBorrow(): Cell[];
//   static cellsWithBorrowCells(cells: Cell[]): Cell[];
//   hasMajorMinorStar(targetStar: Star): boolean;
//   hasStarInstance(targetStar: Star): boolean;
//   hasStar(targetStar: Star): boolean;
//   hasAllStars(targetStars: Star[]): boolean;
//   hasAnyStars(targetStars: Star[]): boolean;
//   hasTemple(targetTemple: Temple): boolean;
// }
// declare class BorrowCell {
//   cell: Cell;
//   cellRatio: number;
//   constructor(cell: Cell, cellRatio: number);
// }

// declare class MajorStar implements Star {
//   key: string;
//   displayName: string;
//   constructor(key: string, displayName: string);
//   toJSON(): string;
//   toString(): string;
//   [util.inspect.custom](depth: number, opts: any): string;
//   static MAJOR_STAR_EMPEROR: Readonly<MajorStar>;
//   static MAJOR_STAR_CHANGE: Readonly<MajorStar>;
//   static MAJOR_STAR_SUN: Readonly<MajorStar>;
//   static MAJOR_STAR_GOLD: Readonly<MajorStar>;
//   static MAJOR_STAR_ENJOYMENT: Readonly<MajorStar>;
//   static MAJOR_STAR_FIRE: Readonly<MajorStar>;
//   static MAJOR_STAR_TREASURY: Readonly<MajorStar>;
//   static MAJOR_STAR_MOON: Readonly<MajorStar>;
//   static MAJOR_STAR_GREED: Readonly<MajorStar>;
//   static MAJOR_STAR_ARGUMENT: Readonly<MajorStar>;
//   static MAJOR_STAR_SUPPORT: Readonly<MajorStar>;
//   static MAJOR_STAR_RULE: Readonly<MajorStar>;
//   static MAJOR_STAR_GENERAL: Readonly<MajorStar>;
//   static MAJOR_STAR_PIONEER: Readonly<MajorStar>;
//   static stars: readonly Readonly<MajorStar>[];
//   static majorStarPlacers: Readonly<Map<MajorStar, MajorStarPlacer>>;
//   getType(): string;
//   getKey(): string;
//   getDisplayName(): string;
//   static getByKey(key: string): MajorStar | null;
//   static getByName(name: string): Readonly<MajorStar> | null;
//   equals(star: Star): boolean;
// }

// declare class MinorStar implements Star {
//   key: string;
//   displayName: string;
//   luck: Luckiness;
//   constructor(key: string, displayName: string, luck: Luckiness);
//   toJSON(): string;
//   toString(): string;
//   [util.inspect.custom](depth: number, opts: any): string;
//   static MINOR_STAR_EARN: Readonly<MinorStar>;
//   static MINOR_STAR_BENEFACTOR_MAN: Readonly<MinorStar>;
//   static MINOR_STAR_BENEFACTOR_WOMAN: Readonly<MinorStar>;
//   static MINOR_STAR_CLEVER: Readonly<MinorStar>;
//   static MINOR_STAR_SKILL: Readonly<MinorStar>;
//   static MINOR_STAR_SUPPORT_LEFT: Readonly<MinorStar>;
//   static MINOR_STAR_SUPPORT_RIGHT: Readonly<MinorStar>;
//   static MINOR_STAR_VOID_GROUND: Readonly<MinorStar>;
//   static MINOR_STAR_LOST: Readonly<MinorStar>;
//   static MINOR_STAR_BURNING: Readonly<MinorStar>;
//   static MINOR_STAR_HIDDEN_FIRE: Readonly<MinorStar>;
//   static MINOR_STAR_COMPETITION: Readonly<MinorStar>;
//   static MINOR_STAR_HINDRANCE: Readonly<MinorStar>;
//   static MINOR_STAR_PEGASUS: Readonly<MinorStar>;
//   static stars: readonly Readonly<MinorStar>[];
//   static minorStarPlacers: Readonly<Map<MinorStar, MinorStarPlacer>>;
//   getType(): string;
//   getKey(): string;
//   getDisplayName(): string;
//   static getByKey(key: string): MinorStar | null;
//   static getByName(name: string): Readonly<MinorStar> | null;
//   equals(star: Star): boolean;
// }

// declare class MiniStar implements Star {
//   key: string;
//   displayName: string;
//   luck: Luckiness;
//   constructor(key: string, displayName: string, luck: Luckiness);
//   toJSON(): string;
//   toString(): string;
//   [util.inspect.custom](depth: number, opts: any): string;
//   static MINI_STAR_SKY_NOBLE: Readonly<MiniStar>;
//   static MINI_STAR_SKY_HAPPINESS: Readonly<MiniStar>;
//   static MINI_STAR_COOK: Readonly<MiniStar>;
//   static MINI_STAR_CRY: Readonly<MiniStar>;
//   static MINI_STAR_LOST: Readonly<MiniStar>;
//   static MINI_STAR_SKILL: Readonly<MiniStar>;
//   static MINI_STAR_ART: Readonly<MiniStar>;
//   static MINI_STAR_FESTIVE: Readonly<MiniStar>;
//   static MINI_STAR_HAPPINESS: Readonly<MiniStar>;
//   static MINI_STAR_LONELY: Readonly<MiniStar>;
//   static MINI_STAR_SINGLE: Readonly<MiniStar>;
//   static MINI_STAR_DISSOLVE: Readonly<MiniStar>;
//   static MINI_STAR_BROKEN: Readonly<MiniStar>;
//   static MINI_STAR_BIG_LOST: Readonly<MiniStar>;
//   static MINI_STAR_LITTLE_DISASTER: Readonly<MiniStar>;
//   static MINI_STAR_LUST: Readonly<MiniStar>;
//   static MINI_STAR_MOON_BENEFACTOR: Readonly<MiniStar>;
//   static MINI_STAR_GENIUS: Readonly<MiniStar>;
//   static MINI_STAR_LONGEVITY: Readonly<MiniStar>;
//   static MINI_STAR_VOID_SKY: Readonly<MiniStar>;
//   static MINI_STAR_EMPTY: Readonly<MiniStar>;
//   static MINI_STAR_EMPTY2: Readonly<MiniStar>;
//   static MINI_STAR_INTERUPTION: Readonly<MiniStar>;
//   static MINI_STAR_INTERUPTION2: Readonly<MiniStar>;
//   static MINI_STAR_PLATFORM: Readonly<MiniStar>;
//   static MINI_STAR_FAME: Readonly<MiniStar>;
//   static MINI_STAR_PUNISHMENT: Readonly<MiniStar>;
//   static MINI_STAR_SEX: Readonly<MiniStar>;
//   static MINI_STAR_WITCH: Readonly<MiniStar>;
//   static MINI_STAR_ILLNESS: Readonly<MiniStar>;
//   static MINI_STAR_GHOST: Readonly<MiniStar>;
//   static MINI_STAR_DISSOLVE2: Readonly<MiniStar>;
//   static MINI_STAR_BACKBITING: Readonly<MiniStar>;
//   static MINI_STAR_SCHOLAR: Readonly<MiniStar>;
//   static MINI_STAR_STRENGTH: Readonly<MiniStar>;
//   static MINI_STAR_GREEN_DRAGON: Readonly<MiniStar>;
//   static MINI_STAR_SMALL_LOST: Readonly<MiniStar>;
//   static MINI_STAR_GENERAL: Readonly<MiniStar>;
//   static MINI_STAR_LETTER: Readonly<MiniStar>;
//   static MINI_STAR_BACKBITING2: Readonly<MiniStar>;
//   static MINI_STAR_JOY: Readonly<MiniStar>;
//   static MINI_STAR_SICK: Readonly<MiniStar>;
//   static MINI_STAR_BIG_LOST2: Readonly<MiniStar>;
//   static MINI_STAR_AMBUSH: Readonly<MiniStar>;
//   static MINI_STAR_LITIGATION: Readonly<MiniStar>;
//   static MINI_STAR_THREE_PODIUM: Readonly<MiniStar>;
//   static MINI_STAR_EIGHT_SEAT: Readonly<MiniStar>;
//   static MINI_STAR_HOLY_LIGHT: Readonly<MiniStar>;
//   static MINI_STAR_NOBLE: Readonly<MiniStar>;
//   static MINI_STAR_YEAR_GOD: Readonly<MiniStar>;
//   static MINI_STAR_PESSIMISTIC: Readonly<MiniStar>;
//   static MINI_STAR_BEREAVEMENT: Readonly<MiniStar>;
//   static MINI_STAR_TRAP: Readonly<MiniStar>;
//   static MINI_STAR_LAWSUIT: Readonly<MiniStar>;
//   static MINI_STAR_SMALL_LOST2: Readonly<MiniStar>;
//   static MINI_STAR_BROKEN_YEAR: Readonly<MiniStar>;
//   static MINI_STAR_DRAGON_LUCK: Readonly<MiniStar>;
//   static MINI_STAR_WHITE_TIGER: Readonly<MiniStar>;
//   static MINI_STAR_GOD_LUCK: Readonly<MiniStar>;
//   static MINI_STAR_FUNERAL: Readonly<MiniStar>;
//   static MINI_STAR_SICK2: Readonly<MiniStar>;
//   static MINI_STAR_ANGEL: Readonly<MiniStar>;
//   static MINI_STAR_INJURY: Readonly<MiniStar>;
//   static MINI_STAR_LEADER: Readonly<MiniStar>;
//   static MINI_STAR_MOUNT: Readonly<MiniStar>;
//   static MINI_STAR_TRANSITION: Readonly<MiniStar>;
//   static MINI_STAR_IDLE: Readonly<MiniStar>;
//   static MINI_STAR_MYSTIC: Readonly<MiniStar>;
//   static MINI_STAR_LITTLE_DISASTER2: Readonly<MiniStar>;
//   static MINI_STAR_DISASTER: Readonly<MiniStar>;
//   static MINI_STAR_SKY_DISASTER: Readonly<MiniStar>;
//   static MINI_STAR_BETRAY: Readonly<MiniStar>;
//   static MINI_STAR_LUST2: Readonly<MiniStar>;
//   static MINI_STAR_MOON_MONSTER: Readonly<MiniStar>;
//   static MINI_STAR_DEAD: Readonly<MiniStar>;
//   static doubleStars: readonly Readonly<MiniStar>[];
//   static stars: readonly Readonly<MiniStar>[];
//   static twelveScholarStars: readonly Readonly<MiniStar>[];
//   static twelveYearGodStars: readonly Readonly<MiniStar>[];
//   static twelveLeaderStars: readonly Readonly<MiniStar>[];
//   static allStars: readonly Readonly<MiniStar>[];
//   static miniStarPlacers: Readonly<Map<MiniStar, MiniStarPlacer>>;
//   getType(): string;
//   getKey(): string;
//   getDisplayName(): string;
//   static getByKey(key: string): MiniStar | null;
//   static getByName(name: string): Readonly<MiniStar> | null;
//   equals(star: Star): boolean;
// }

// declare class Temple {
//   key: string;
//   displayName: string;
//   formalName: string;
//   index: number;
//   constructor(
//     key: string,
//     displayName: string,
//     formalName: string,
//     index: number
//   );
//   toJSON(): string;
//   toString(): string;
//   [util.inspect.custom](depth: number, opts: any): string;
//   getDisplayName(): string;
//   getFormalName(): string;
//   static getByKey(key: string): Temple | null;
//   static getByName(name: string): Readonly<Temple> | undefined;
//   static TEMPLE_DESTINY: Readonly<Temple>;
//   static TEMPLE_BROTHER: Readonly<Temple>;
//   static TEMPLE_MARRIAGE: Readonly<Temple>;
//   static TEMPLE_CHILDREN: Readonly<Temple>;
//   static TEMPLE_MONEY: Readonly<Temple>;
//   static TEMPLE_ILLNESS: Readonly<Temple>;
//   static TEMPLE_MOVE: Readonly<Temple>;
//   static TEMPLE_FRIEND: Readonly<Temple>;
//   static TEMPLE_CAREER: Readonly<Temple>;
//   static TEMPLE_HOUSE: Readonly<Temple>;
//   static TEMPLE_HAPPINESS: Readonly<Temple>;
//   static TEMPLE_PARENT: Readonly<Temple>;
//   static TEMPLE_BODY: Readonly<Temple>;
//   static TEMPLES: readonly Readonly<Temple>[];
//   static LOOP_TEMPLES: readonly Readonly<Temple>[];
//   equals(temple: Temple): boolean;
// }
